<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="movie">
	<insert id="insertMovie" parameterType="movie">
	insert into movie_tbl values
	(movie_seq.nextval, #{movieTitle}, #{movieDirector}, #{movieActor}, #{movieGenre}, #{movieTime}, #{movieDate}, #{movieRating}, #{movieContent}, #{filmSociety}, #{classicSociety}, #{specialMovie}, #{enrollMember}, #{movieType})
	
	<selectKey resultType="_int" order="AFTER" keyProperty="movieNo">
		select max(movie_no) from movie_tbl
	</selectKey>
	</insert>
	<insert id="insertMainFile" parameterType="movieFile">
		insert into movie_file values(movie_file_seq.nextval, #{movieFileName}, #{movieFilePath}, '메인', #{movieNo})
	</insert>
	<insert id="insertPostFile" parameterType="movieFile">
		insert into movie_file values(movie_file_seq.nextval, #{movieFileName}, #{movieFilePath}, '포스트', #{movieNo})
	</insert>
	<insert id="insertmovieVideo" parameterType="movieVideo">
		insert into movie_video values(movie_video_seq.nextval, #{videoLink}, #{movieNo})
	</insert>
	<select id="movieList" resultType="movie">
		select * from movie_tbl
	</select>
	<select id="movieListCount" resultType="_int">
		select count(*) from movie_tbl
	</select>
	<select id="selectMovieAll" resultType="movie" parameterType="_int">
    select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m
	</select>
	<!-- 사용자 선호 영화 조회를 위함 -->
	<select id="favoriteMovieList" resultType="movie" parameterType="_int">
	  select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo})=1
	</select>
	<!-- 상영예정작 조회를 위함 -->
	<select id="expectedMovie" resultType="movie" parameterType="_int">
		select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where movie_date > to_char(sysdate,'yyyy-mm-dd')
	</select>
		<!-- 특별상영작 조회를 위함 -->
	<select id="specialMovieList" resultType="movie" parameterType="_int">
		select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where special_movie is not null
	</select>
	<!-- 필름소사이어티 조회를 위함 -->
		<select id="filmSocietyList" resultType="movie" parameterType="_int">
		select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where film_society is not null
	</select>
	<!-- 클래식소사이어티 조회를 위함 -->
			<select id="classicSocietyList" resultType="movie" parameterType="_int">
		select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where classic_society is not null
	</select>
	
	<!-- movie_file 메인만 출력 -->
	<select id="selectMovieFile" resultType="movieFile" parameterType="_int">
			select 
			movie_file_no as movieFileNo,
			movie_file_name as movieFileName,
			movie_file_path as movieFilePath,
			movie_file_category as movieFileCategory,
			movie_no as movieNo
			from movie_file where movie_file_category='메인' and movie_no=#{movieNo}
	</select>
	<!-- movie_file 전부 출력 -->
	<select id="selectmovieFileAll" resultType="movieFile" parameterType="_int">
			select 
			movie_file_no as movieFileNo,
			movie_file_name as movieFileName,
			movie_file_path as movieFilePath,
			movie_file_category as movieFileCategory,
			movie_no as movieNo
			from movie_file where movie_no=#{movieNo}
	</select>
	<select id="selectMoviePost" resultType="movieFile" parameterType="_int">
		select 
			movie_file_no as movieFileNo,
			movie_file_name as movieFileName,
			movie_file_path as movieFilePath,
			movie_file_category as movieFileCategory,
			movie_no as movieNo
			from movie_file where movie_file_category='포스트' and movie_no=#{movieNo}
	</select>
	<select id="selectFileList" resultType="movieFile" parameterType="_int">
		select 
			movie_file_no as movieFileNo,
			movie_file_name as movieFileName,
			movie_file_path as movieFilePath,
			movie_file_category as movieFileCategory,
			movie_no as movieNo
		from movie_file where movie_no=#{movieNo}
	</select>
	<select id="selectOneMovie" parameterType="_int" resultType="movie">
				select
			 	movie_no as movieNo,
				movie_title as movieTitle,
				movie_director as movieDirector,
				movie_actor as movieActor,
				movie_genre as movieGenre,
				movie_time as movieTime,
				to_char(movie_date,'yyyy-mm-dd')  as movieDate,
				movie_rating as movieRating,
				movie_content as movieContent,
				film_society as filmSociety,
				classic_society as classicSociety,
				special_movie as specialMovie,
				enroll_member as enrollMember,
				movie_type as movieType
			 from movie_tbl where movie_no=#{movieNo}
		</select>
		<!-- 사용자 관람영화 -->
		<select id="selectOneMovieAll" parameterType="_int" resultType="movie">
			select DISTINCT 
				movie_file.movie_file_name as movieFileName , 
				movie_tbl.movie_title as movieTitle , 
				schedule_tbl.schedule_start as scheduleStart , 
				schedule_tbl.theater_branch as theaterBranch ,
				movie_tbl.movie_no as movieNo
			from movie_file, member, schedule_tbl, movie_tbl, ticketing_tbl, pay
			where movie_tbl.movie_no = movie_file.movie_no
				and movie_tbl.movie_title = schedule_tbl.movie_title
				and movie_file.movie_file_category='메인'
				and member.member_no = pay.member_no
				and pay.pay_no = ticketing_tbl.pay_no
				and ticketing_tbl.schedule_no = schedule_tbl.schedule_no
				and member.member_no=#{memberNo}
		</select>
		<select id="selectOneMovieAll2" parameterType="_int" resultType="MyMovie">
			select DISTINCT 
				movie_file.movie_file_name as movieFileName , 
				movie_tbl.movie_title as movieTitle , 
				schedule_tbl.schedule_start as scheduleStart , 
				schedule_tbl.theater_branch as theaterBranch ,
				movie_tbl.movie_no as movieNo
			from movie_file, member, schedule_tbl, movie_tbl, ticketing_tbl, pay
			where movie_tbl.movie_no = movie_file.movie_no
				and movie_tbl.movie_title = schedule_tbl.movie_title
				and movie_file.movie_file_category='메인'
				and member.member_no = pay.member_no
				and pay.pay_no = ticketing_tbl.pay_no
				and ticketing_tbl.schedule_no = schedule_tbl.schedule_no
				and member.member_no=#{memberNo}
		</select>
	<select id="selectOneMovieVideo" parameterType="_int" resultType="movieVideo">
		select 
			movie_video_no as videoNo,
			movie_video_link as videoLink
		from movie_video where movie_no=#{movieNo}
	</select>
	<insert id="insertReview" parameterType="review" >
		insert into review values(review_seq.nextval,#{movieNo},#{reviewContent},#{movieScore},to_char(sysdate,'yyyy-mm-dd'),#{memberId})
		<selectKey  resultType="_int" order="AFTER" keyProperty="reviewCommentNo">
			select max(review_comment_no) from review
		</selectKey>		
	</insert>
	<insert id="insertWatchPoint" parameterType="reviewWatch" >
		insert into watch_point values(watch_point_seq.nextval,#{reviewCommentNo},#{story},#{actor},#{ost},#{videoVisual},#{production})
	</insert>
	<select id="getOneReview" parameterType="String" resultType="review">
		select
			member_id as memberId
		from
			review
		where
			member_id = #{memberId}
	</select>
	<select id="oneMovieAllReview" parameterType="_int" resultType="review">
		select
			review_comment_no as reviewCommentNo,
			movie_no as movieNo,
			review_content as reviewContent,
			movie_score as movieScore,
			review_date as reviewDate,
			member_id as memberId,
			watch_point_no as watchPointNo,
			review_comment_no as reviewCommentNo,
			story as story,
			actor as actor,
			ost as ost,
			video_visual as videoVisual,
			production as production
		from review join watch_point using(review_comment_no)
		where movie_no=#{movieNo}			
	</select>
	<select id="watchPointAll" parameterType="_int" resultType="reviewWatch">
		select
			watch_point_no as watchPointNo,
			review_comment_no as reviewCommentNo,
			story as story,
			actor as actor,
			ost as ost,
			video_visual as videoVisual,
			production as production
		from watch_point 
		where review_comment_No = #{reviewCommentNo}
	
	</select>
	<select id="selectWatchPointAvg" parameterType="_int" resultType="review">
		select
			nvl(trunc(avg(movie_score)),0) as movieScoreAvg
			from watch_point join review using(review_comment_no)
		where 
			movie_no=#{_parameter}
	</select>
	<select id="selectWatchPointSum" parameterType="_int" resultType="watchPoint">
		select
			sum(story) as story,
			sum(actor) as actor,
			sum(ost) as ost,
			sum(video_visual) as videoVisual,
			sum(production) as production
		from review join watch_point using(review_comment_no)
        where movie_no=#{movieNo}	
	</select>
	<select id="ReviewListCount" parameterType="_int" resultType="_int">
		 select 
		 	count(review_comment_no) as reviewListCount
		 from review 
		 where movie_no=#{movieNo}
	</select>
	<!-- 작성한 관람평 -->
	<select id="ReviewListCount2" parameterType="String" resultType="_int">
		 select 
		 	count(review_comment_no) as reviewListCount
		 from review 
		 where member_id=#{_parameter}
	</select>
	<select id="selectOneUpdateMovie" parameterType="_int" resultMap="getMovie">
		select 
				*
		from movie_tbl where movie_no=#{movieNo}
	</select>
	<resultMap type="movie" id="getMovie">
	<result column="movie_no" property="movieNo"/>
	<result column="movie_title" property="movieTitle"/>
	<result column="movie_director" property="movieDirector"/>
	<result column="movie_actor" property="movieActor"/>
	<result column="movie_genre" property="movieGenre"/>
	<result column="movie_time" property="movieTime"/>
	<result column="movie_date" property="movieDate"/>
	<result column="movie_rating" property="movieRating"/>
	<result column="movie_content" property="movieContent"/>
	<result column="film_society" property="filmSociety"/>
	<result column="classic_society" property="classicSociety"/>
	<result column="special_movie" property="specialMovie"/>
	<result column="enroll_member" property="enrollMember"/>
	<collection 
	property="moviePost" 
	select="selectMoviePost" 
	column="movie_no"
	ofType="Movie"
	javaType="java.util.ArrayList"
	/>
	<collection 
	property="movieVideos" 
	select="selectOneMovieVideo" 
	column="movie_no"
	ofType="MovieVideo"
	javaType="java.util.ArrayList"
	/>
</resultMap>
<update id="updateMovie" parameterType="movie">
	update movie_tbl set 
		movie_title=#{movieTitle}, movie_director=#{movieDirector}, movie_actor=#{movieActor}, movie_genre=#{movieGenre}, movie_time=#{movieTime}, movie_date=#{movieDate}, movie_rating=#{movieRating}, movie_content=#{movieContent}, film_society=#{filmSociety}, classic_society=#{classicSociety}, special_movie=#{specialMovie}, movie_type=#{movieType}
	where movie_no=#{movieNo}
</update>
<delete id="delteMovie" parameterType="_int">
	delete from movie_tbl where movie_no=#{movieNo}
</delete>
<delete id="deleteFile" parameterType="map">
	delete from movie_file where movie_file_no=
	<foreach collection="fileArray" item="fileno" open="(" close=")" separator=",">
		#{fileno}
	</foreach>
</delete>
<delete id="deleteVideo" parameterType="map">
delete from movie_video where movie_video_no=
	<foreach collection="fileArray" item="videoNo" open="(" close=")" separator=",">
		#{videoNo}
	</foreach>
</delete>
<update id="updateReview" parameterType="review">
	update review set
		review_content=#{reviewContent}, movie_score=#{movieScore} where review_comment_no=#{reviewCommentNo} 
</update>
<update id="updateWatchPoint" parameterType="watchPoint">
	update watch_point watch_point set story=#{story},actor=#{actor},ost=#{ost},video_visual=#{videoVisual},production=#{production} where review_comment_no=#{reviewCommentNo}
</update>
<delete id="deleteReview" parameterType="_int">
	delete from review where review_comment_no=#{_parameter}
</delete>
<delete id="deleteWatchPoint" parameterType="_int">
	delete from watch_point where review_comment_no=#{_parameter}
</delete>
<select id="selectReviewList" parameterType="map" resultType="review">
select * from 
		(select rownum as rnum, review.*from
			(select 
				r.review_comment_no as reviewCommentNo,
				movie_no as movieNo,
				review_content as reviewContent,
				movie_score as movieScore,
				review_date as reviewDate,
				member_id as memberId,
				story as story,
                actor as actor,
                ost as ost,
                video_visual as videoVisual,
                production as production,
                (select count(*) from review_like rl where rl.review_comment_no=r.review_comment_no) as likeCount,
                (select count(*) from review_like rl where rl.review_comment_no=r.review_comment_no and member_no=#{memberNo}) as likeCheck
			from review r join watch_point wp on(r.review_comment_no=wp.review_comment_no) where movie_no=#{movieNo} order by 1 desc)review)
		where rnum between #{start} and #{end}
</select>
<select id="totalCount" parameterType="review" resultType="_int">
	select count(*) from review where  movie_no=#{_parmeter}
</select>
<insert id="postInsert" parameterType="moviePost">
	<choose><!-- 동적쿼리문 -->
		<when test="movieVideoNo != 0 and movieFileNo != 0">
		insert into movie_post 
		values(movie_post_seq.nextval, #{movieNo}, #{movieVideoNo}, #{movieFileNo},#{memberId},#{movieTitle},#{moviePostContent}, to_char(sysdate,'yyyy-mm-dd'))
		</when>
		<when test="movieVideoNo == 0">
		insert into movie_post 
		values(movie_post_seq.nextval, #{movieNo}, null, #{movieFileNo},#{memberId},#{movieTitle},#{moviePostContent}, to_char(sysdate,'yyyy-mm-dd'))
		</when>
		<when test="movieFileNo == 0">
		insert into movie_post 
		values(movie_post_seq.nextval, #{movieNo}, #{movieVideoNo}, null,#{memberId},#{movieTitle},#{moviePostContent}, to_char(sysdate,'yyyy-mm-dd'))
		</when>
	</choose>
</insert>
<select id="oneMoviePostAll" resultType="moviePost">
	select
		movie_post_no as moviePostNo,
		p.movie_no as movieNo,
		p.movie_video_no as movieVideoNo,
		p.movie_file_no as movieFileNo,
		member_id as memberId,
		movie_title as movieTitle,
		movie_post_content as moviePostContent,
		movie_post_date as moviePostDate,
		movie_file_path as movieFilePath,
        movie_video_link as videoLink
    from movie_post p 
    left join movie_file f on(p.movie_file_no=f.movie_file_no) 
    left join movie_video v on(p.movie_video_no=v.movie_video_no) where p.movie_no=#{_parameter}
</select>
<select id="oneMoviePostAll2" resultType="moviePost">
	select
		movie_post_no as moviePostNo,
		p.movie_no as movieNo,
		p.movie_video_no as movieVideoNo,
		p.movie_file_no as movieFileNo,
		member_id as memberId,
		movie_title as movieTitle,
		movie_post_content as moviePostContent,
		movie_post_date as moviePostDate,
		movie_file_path as movieFilePath,
        movie_video_link as videoLink
    from movie_post p 
    left join movie_file f on(p.movie_file_no=f.movie_file_no) 
    left join movie_video v on(p.movie_video_no=v.movie_video_no) where p.member_id=#{_parameter}
</select>
<select id="detailPost" parameterType="String" resultType="moviePost">
	select
		movie_post_no as moviePostNo,
		p.movie_no as movieNo,
		p.movie_video_no as movieVideoNo,
		p.movie_file_no as movieFileNo,
		member_id as memberId,
		movie_title as movieTitle,
		movie_post_content as moviePostContent,
		movie_post_date as moviePostDate,
		movie_file_path as movieFilePath,
        movie_video_link as videoLink
    from movie_post p 
    left join movie_file f on(p.movie_file_no=f.movie_file_no) 
    left join movie_video v on(p.movie_video_no=v.movie_video_no) where movie_post_no=#{_parameter}
</select>
<insert id="insertPostComment" parameterType="moviePostComment">
	insert into movie_post_comment
		values(movie_post_comment_seq.nextval,#{moviePostNo},#{movieTitle},#{memberId},#{postComment},to_char(sysdate,'yyyy-mm-dd'))
</insert>
<select id="selectPostComment" parameterType="_int" resultType="moviePostComment">
	select movie_post_comment_no as moviePostCommentNo,
			movie_post_no as moviePostNo,
			movie_title as movieTitle,
			member_id as memberId,
			post_comment as postComment,
			movie_post_comment_date as moviePostCommentDate
	from movie_post_comment where movie_post_no=#{_parameter}
</select>
<update id="updatePostComment" parameterType="moviePostComment">
		update movie_post_comment set
			post_comment=#{postComment} where movie_post_comment_no=#{moviePostCommentNo}
</update>
<select id="moviePostCount" parameterType="moviePost" resultType="_int">
	select count(*) from movie_post where movie_no=#{movieNo}
</select>
<!-- 사용자 무비포스트 count -->
<select id="moviePostCount2" parameterType="moviePost" resultType="_int">
	select count(*) from movie_post where member_id=#{_parameter}
</select>
<delete id="deletePostComment" parameterType="moviePostComment">
	delete from movie_post_comment where movie_post_comment_no=#{moviePostCommentNo}
</delete>
<select id="selectOneMoviePost" parameterType="_int" resultType="moviePost">
	select
		movie_post_no as moviePostNo,
		p.movie_no as movieNo,
		p.movie_video_no as movieVideoNo,
		p.movie_file_no as movieFileNo,
		member_id as memberId,
		movie_title as movieTitle,
		movie_post_content as moviePostContent,
		movie_post_date as moviePostDate,
		movie_file_path as movieFilePath,
        movie_video_link as videoLink
    from movie_post p 
    left join movie_file f on(p.movie_file_no=f.movie_file_no) 
    left join movie_video v on(p.movie_video_no=v.movie_video_no) where movie_post_no=#{_parameter}
</select>
<update id="postUpdate" parameterType="moviePost">
	<choose>
		<when test="movieVideoNo != 0 and movieFileNo != 0">
			update movie_post set
			movie_video_no=#{movieVideoNo},movie_file_no=#{movieFileNo},movie_post_content=#{moviePostContent} where movie_post_no=#{moviePostNo}
		</when>
		<when test="movieVideoNo == 0">
			update movie_post set
			movie_video_no=null,movie_file_no=#{movieFileNo},movie_post_content=#{moviePostContent} where movie_post_no=#{moviePostNo}
		</when>
		<when test="movieFileNo == 0">
			update movie_post set
			movie_video_no=#{movieVideoNo},movie_file_no=null,movie_post_content=#{moviePostContent} where movie_post_no=#{moviePostNo}
		</when>
	</choose>
</update>
<delete id="postDelete" parameterType="moviePost">
		delete from movie_post where movie_post_no=#{moviePostNo}
</delete>
<!-- 영화 좋아요 insert -->
<insert id="movieLikeInsert" parameterType="map">
	insert into movie_like values(movie_like_seq.nextval,#{movieNo},#{memberNo})
</insert>
<!--영화 좋아요 delete  -->
<delete id="movieLikeDelete" parameterType="map">
	delete from movie_like where movie_no=#{movieNo} and member_no=#{memberNo}
</delete>
<!-- 관람평(review)좋아요 insert -->
<insert id="reviewLikeInsert" parameterType="map">
	insert into review_like values(review_like_seq.nextval,#{reviewCommentNo},#{memberNo})
</insert>
<!-- 관람평(review)좋아요 delete -->
<delete id="reviewLikeDelete" parameterType="map">
	delete from review_like where review_comment_no=#{reviewCommentNo} and member_no=#{memberNo}
</delete>
<!-- 상영예정작 총 갯수 조회를 위함 -->
<select id="expectedMovieCount" resultType="_int">
	select count(*) from movie_tbl where movie_date > to_char(sysdate,'yyyy-mm-dd')
</select>
<!-- 특별상영작 총 갯수 조회를 위함 -->
<select id="specialMovieCount" resultType="_int">
	select count(*) from movie_tbl where special_movie is not null
</select>
<!-- 필름 소사이어티 총 갯수 조회를 위함 -->
<select id="fileSocietyCount" resultType="_int">
	select count(*) from movie_tbl where film_society is not null
</select>
<!-- 클래식 소사이어티 총 갯수 조회를 위함 -->
<select id="classicSocietyCount" resultType="_int">
	select count(*) from movie_tbl where classic_society is not null
</select>
<!-- 사용자 선호영화 총 갯수 조회를 위함 -->
<select id="favoriteMovieCount" resultType="_int" parameterType="_int">
select count(*) from
	  (select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType,
           	(select count(*) from movie_like ml where ml.movie_no=m.movie_no) as likeCount,
            (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo}) as likeCheck
		 from movie_tbl m where (select count(*) from movie_like ml where ml.movie_no=m.movie_no and member_no=#{memberNo})=1)
</select>
<!-- 사용자 관람영화 총 갯수 조회를 위함 -->
<select id="myMovieListCount" resultType="_int" parameterType="_int">
select count(*) from
	  (select DISTINCT 
				movie_file.movie_file_name as movieFileName, 
				movie_tbl.movie_title as movieTitle, 
				schedule_tbl.schedule_start as scheduleStart, 
				schedule_tbl.theater_branch as theaterBranch,
				movie_tbl.movie_no as movieNo
			from movie_file, member, schedule_tbl, movie_tbl, ticketing_tbl, pay
			where movie_tbl.movie_no = movie_file.movie_no
				and movie_tbl.movie_title = schedule_tbl.movie_title
				and movie_file.movie_file_category='메인'
				and member.member_no = pay.member_no
				and pay.pay_no = ticketing_tbl.pay_no
				and ticketing_tbl.schedule_no = schedule_tbl.schedule_no
				and member.member_no=#{memberNo})
</select>
<!-- 영화 좋아요 총 갯수 -->
<select id="totalMovieLike" resultType="_int" parameterType="_int">
	select count(*) from movie_like where movie_no=#{movieNo}
</select>
<!-- 아이디로 관람평 조회 -->
<select id="selectOneReview" resultType="review" parameterType="map">
	select
			review_comment_no as reviewCommentNo,
			movie_no as movieNo,
			review_content as reviewContent,
			movie_score as movieScore,
			review_date as reviewDate,
			member_id as memberId,
			watch_point_no as watchPointNo,
			review_comment_no as reviewCommentNo,
			story as story,
			actor as actor,
			ost as ost,
			video_visual as videoVisual,
			production as production
		from review join watch_point using(review_comment_no)
		where member_id=#{memberId} and movie_no=#{movieNo}
</select>
<!-- 예매율 -->
<select id="reservationRate" resultType="_double" parameterType="string">
    SELECT
        decode((SELECT COUNT(*) FROM TICKETING_TBL WHERE SCHEDULE_NO IN (SELECT SCHEDULE_NO FROM SCHEDULE_TBL WHERE TO_CHAR(SCHEDULE_START,'YYYY-MM-DD') =  TO_CHAR(SYSDATE,'YYYY-MM-DD'))),0,0,trunc(
    (SELECT COUNT(*) FROM TICKETING_TBL WHERE SCHEDULE_NO IN 
    (SELECT SCHEDULE_NO FROM SCHEDULE_TBL WHERE TO_CHAR(SCHEDULE_START,'YYYY-MM-DD') =  TO_CHAR(SYSDATE,'YYYY-MM-DD') AND MOVIE_TITLE=#{movieTitle})) / (SELECT COUNT(*) FROM TICKETING_TBL WHERE SCHEDULE_NO IN (SELECT SCHEDULE_NO FROM SCHEDULE_TBL WHERE TO_CHAR(SCHEDULE_START,'YYYY-MM-DD') =  TO_CHAR(SYSDATE,'YYYY-MM-DD')))*100,1))
    AS RESERVE_RATE
    FROM DUAL
    
</select>
<!-- 전체누적관객수 -->
<select id="totalAudience" resultType="_int" parameterType="string">	
	 SELECT 
        COUNT(*)
    FROM TICKETING_TBL
    LEFT JOIN SCHEDULE_TBL USING(SCHEDULE_NO)
    WHERE MOVIE_TITLE = #{movieTitle}
</select>
<!-- 일별 누적관객수 -->
<select id="dayTotalAudience" resultType="schedule" parameterType="string">
   SELECT         
        SUBSTR(TO_CHAR(SCHEDULE_START,'YYYY-MM/DD'),6) as SCHEDULESTART ,
        COUNT(*) as audienceCnt
    FROM TICKETING_TBL
    LEFT JOIN SCHEDULE_TBL USING(SCHEDULE_NO)
    WHERE MOVIE_TITLE = #{movieTitle} AND TO_CHAR(SCHEDULE_START,'YYYY-MM-DD')>= TO_CHAR(SYSDATE-4,'YYYY-MM-DD')
    GROUP BY TO_CHAR(SCHEDULE_START,'YYYY-MM/DD') order by SCHEDULESTART ASC

</select>
<select id="selectMovieList" resultType="movie">
	select 
		 	movie_no as movieNo,
			movie_title as movieTitle,
			movie_director as movieDirector,
			movie_actor as movieActor,
			movie_genre as movieGenre,
			movie_time as movieTime,
			to_char(movie_date,'yyyy-mm-dd')  as movieDate,
			movie_rating as movieRating,
			movie_content as movieContent,
			film_society as filmSociety,
			classic_society as classicSociety,
			special_movie as specialMovie,
			enroll_member as enrollMember,
			movie_type as movieType
		 from movie_tbl 
</select>
<select id="selectMovieCnt" resultType="_int">
  	select count(*) from movie_tbl
  </select>
</mapper>
