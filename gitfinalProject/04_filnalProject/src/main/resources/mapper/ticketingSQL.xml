<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ticketing">
<select id="selectMovieAll" resultType="Movie">
	select
	 	movie_no as movieNo,
		movie_title as movieTitle,
		movie_director as movieDirector,
		movie_actor as movieActor,
		movie_genre as movieGenre,
		movie_time as movieTime,
		to_char(movie_date,'yyyy-mm-dd') as movieDate,
		movie_rating as movieRating,
		movie_content as movieContent,
		film_society as filmSociety,
		classic_society as classicSociety,
		special_movie as specialMovie,
		enroll_member as enrollMember,
		movie_type as movieType
	 from movie_tbl
</select>
<select id="selectSchedule" parameterType="string" resultType="map">
	select distinct movie_title
	from schedule_tbl 
	join movie_tbl using(movie_title) 
	where to_char(schedule_start, 'dd/mm/yyyy') = #{_parameter}
</select>
<select id="selectOneTheaterBrch" parameterType="_int" resultType="theater">
  	select 
		 	theater_no as theaterNo,
			theater_local as theaterLocal,
			theater_branch as theaterBranch,
			theater_addr as theaterAddr,	
			theater_facility as theaterFacility,
			theater_content as theaterContent,
			enroll_member as EnrollMember		
	  from theater_tbl
	  where theater_no = #{_parameter}
</select>
<select id="choiceDayTheater" parameterType="map" resultType="theaterLocalCount">
	select count(*) as count, theater_local as theaterLocal
	from theater_tbl  
	join schedule_tbl using(theater_branch) 
	where movie_title = #{movieTitle} 
	and to_char(schedule_start, 'DD/MM/YYYY') = #{choiceDataDay} 
	group by theater_local
</select>
<select id="choiceLocalBranch" parameterType="map" resultType="string">
	SELECT 
		THEATER_BRANCH 
	FROM 
		THEATER_TBL 
	JOIN SCHEDULE_TBL USING(THEATER_BRANCH) 
	WHERE 
		MOVIE_TITLE = #{movieTitle} 
		AND 
		to_CHAR(SCHEDULE_START, 'DD/MM/YYYY') = #{choiceDataDay} 
		AND 
		THEATER_LOCAL = #{theaterLocal}
</select>

<select id="choiceBranchSchedule" parameterType="map" resultType="ticketingSchedule">
	select 
		schedule_no as scheduleNo,
		movie_title as movieTitle, 
		to_char(schedule_start,'hh24:mi') as scheduleStart, 
        to_char(schedule_end,'hh24:mi') as scheduleEnd,
		theater_branch as theaterBranch
	from 
		schedule_tbl 
	where 
		movie_title = #{movieTitle} 
		and to_char(schedule_start, 'DD/MM/YYYY') = #{choiceDataDay}
		and to_char(schedule_end, 'DD/MM/YYYY') = #{choiceDataDay} 
		and theater_branch = #{theaterBranch}
</select> 
<select id="selectGiftTicket" parameterType="_int" resultType="giftTicket">
	select
	    gift_ticket_no as giftTicketNo,
	    gift_ticket_serial as giftTicketSerial,
	    gift_ticket_name as giftTicketName,
	    gift_ticket_date as giftTicketDate,
	    gift_ticket_status as giftTicketStatus
	from
	    gift_ticket
	where
	    member_no = #{_parameter}
</select>
<select id="selectLatestPay" resultType="_int">
	select max(pay_no) from pay
</select>
<select id="getMovieFile" parameterType="string" resultType="string">
	select 
		movie_file_path as movieFilePath 
	from 
		movie_file 
	where movie_no = 
		(select movie_no from movie_tbl where movie_title= #{movieTitle})
	 and movie_file_category = '메인'
</select>
<insert id="insertPay" parameterType="pay">
	insert into pay values
		(pay_seq.nextval, #{payPrice},to_char(sysdate,'yyyy-mm-dd/hh24:mi'),1,#{memberNo})
		<selectKey resultType="_int" order="AFTER" keyProperty="payNo">
			select max(pay_no) from pay
		</selectKey>
</insert>
<insert id="insertTicketing" parameterType="ticketing">
	insert into ticketing_tbl values
		(ticketing_seq.nextval, #{ticketingTime},#{ticketingAge},#{seat},#{payNo},#{scheduleNo})
</insert>
<select id="selectSalesPerDay" resultType="salesPerDay">
	select month, max(accumulatedrevenue) as accumulatedrevenue
		from (
		    select month, max(dailyaccumulatedrevenue) as accumulatedrevenue
		    from (
		        select to_char(to_date(pay_regdate, 'yyyy-mm-dd hh24:mi:ss'), 'mm-dd') as month,
		               sum(pay_price) over (order by to_date(pay_regdate, 'yyyy-mm-dd hh24:mi:ss')) as dailyaccumulatedrevenue
		        from pay
		    ) subquery
		    group by month, dailyaccumulatedrevenue
		) subquery2
		group by month
		order by month
</select>
</mapper>
